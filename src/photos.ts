import {
  readJson,
  readdir,
  mkdirp,
  pathExists,
  writeFile,
  ensureDir,
  readFile,
} from "fs-extra";
const download = require("download");
import { config } from "dotenv";
config();
import Airtable from "airtable";
const airtable = new Airtable();

import { join } from "path";
import { safeLoad } from "js-yaml";
import slugify from "@sindresorhus/slugify";
function capitalizeFirstLetter(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const updateAirtableRecord = (
  base: Airtable.Base,
  baseName: string,
  data: any[]
) =>
  new Promise((resolve, reject) => {
    base(baseName).update(data, (error: any, records: any) => {
      if (error) return reject(error);
      resolve(records);
    });
  });

const log = (...args: string[]) =>
  console.log(new Date().toISOString(), ...args);

const wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

const fileName = (file: string) => {
  if (file.includes(". ")) file = file.split(". ")[1];
  file = slugify(file.trim());
  return `${file}.json`;
};

const keyName = (key: string) =>
  slugify(key.trim()).replace(/-([a-z])/g, (g) => g[1].toUpperCase());

export const getPhotos = async () => {
  const yaml = await readFile(join(".", "src", "airtable.yml"), "utf8");
  const sheetFile: {
    publicAppId: string;
    tabs: string[];
    attachments: string[];
  } = safeLoad(yaml);
  log("Updating images from Airtable");

  for await (const tab of sheetFile.tabs) {
    const json = await readJson(join(".", fileName(tab)));
    for await (const record of json) {
      for await (const attachmentKey of sheetFile.attachments.map((key) =>
        keyName(key.trim())
      )) {
        for await (const image of record[attachmentKey] || []) {
          const url = `attachments/${slugify(tab.trim())}/${
            record._id
          }/${slugify(attachmentKey)}/${image.id}`;
          await ensureDir(join(".", url));
          const hasImage = false && (await pathExists(join(".", url)));
          if (!hasImage && Math.random() > 0.99) {
            for await (const size of Object.keys(image.thumbnails || {})) {
              const fileExtension = image.type.replace("image/", "");
              log("Downloading", `${url}/${size}.${fileExtension}`);
            }
            log("Writing file", `${url}/README.md`);
            await writeFile(
              join(".", url, "README.md"),
              `# Image \`${image.id}\`

## Original file details

- **ID:** ${image.id}
- **URL:** ${image.url}
- **File name:** ${image.filename}
- **Size:** ${image.size}
- **Type:** ${image.type}
- **Thumbnails:**
${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `  - [${i.charAt(0).toUpperCase() + i.slice(1)}](${
        image.thumbnails[i].url
      }) (${image.thumbnails[i].width}Ã—${image.thumbnails[i].height})`
  )
  .join("\n")}

## Generated file details

${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `- ${i.charAt(0).toUpperCase() +
        i.slice(1)}: https://open-data.karuna2020.org/${url}/${i}.${(
        image.type || ""
      ).replace("image/", "")}`
  )
  .join("\n")}

## Image preview

${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `### ${i.charAt(0).toUpperCase() +
        i.slice(1)}\n\n![](https://open-data.karuna2020.org/${url}/${i}.${(
        image.type || ""
      ).replace("image/", "")})`
  )
  .join("\n\n")}

_This file is automatically generated, please don't edit it manually. If you need any changes, edit [photos.ts](/photos.ts) or ask [@AnandChowdhary](https://github.com/AnandChowdhary)_
`
            );
          } else {
            // log("Skipping", tab, record._id, attachmentKey, image.id);
          }
        }
      }
    }
  }
};

getPhotos();
