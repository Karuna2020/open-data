import { readJson, writeFile, ensureDir, readFile } from "fs-extra";
const download = require("download");
import { config } from "dotenv";
config();
import Airtable from "airtable";
const airtable = new Airtable();

import { join } from "path";
import { safeLoad } from "js-yaml";
import slugify from "@sindresorhus/slugify";
import { log, keyName, fileName, updateAirtableRecord } from "./common";

export const getPhotos = async () => {
  const yaml = await readFile(join(".", "src", "airtable.yml"), "utf8");
  const sheetFile: {
    publicAppId: string;
    tabs: string[];
    attachments: string[];
  } = safeLoad(yaml);
  const base = airtable.base(sheetFile.publicAppId);
  log("Updating images from Airtable");

  for await (const tab of sheetFile.tabs) {
    const json = await readJson(join(".", fileName(tab)));
    for await (const record of json) {
      if (!(record.cdnImages || "").trim()) {
        const imageUrls: string[] = [];
        for await (const attachmentKey of sheetFile.attachments) {
          for await (const image of record[keyName(attachmentKey.trim())] ||
            []) {
            const url = `attachments/${slugify(tab.trim())}/${
              record._id
            }/${slugify(attachmentKey)}/${image.id}`;
            await ensureDir(join(".", url));
            const fileExtension = image.type.split("/")[1];
            for await (const size of Object.keys(image.thumbnails || {})) {
              log("Downloading", `${url}/${size}.${fileExtension}`);
              await writeFile(
                join(".", `${url}/${size}.${fileExtension}`),
                await download(image.thumbnails[size].url)
              );
              imageUrls.push(
                `https://open-data.karuna2020.org/${url}/large.${fileExtension}`
              );
              log("Writing file", `${url}/README.md`);
            }
            await writeFile(
              join(".", url, "README.md"),
              `# Image \`${image.id}\`

## Original file details

- **ID:** ${image.id}
- **URL:** ${image.url}
- **File name:** ${image.filename}
- **Size:** ${image.size}
- **Type:** ${image.type}
- **Thumbnails:**
${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `  - [${i.charAt(0).toUpperCase() + i.slice(1)}](${
        image.thumbnails[i].url
      }) (${image.thumbnails[i].width}Ã—${image.thumbnails[i].height})`
  )
  .join("\n")}

## Generated file details

${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `- ${i.charAt(0).toUpperCase() +
        i.slice(1)}: https://open-data.karuna2020.org/${url}/${i}.${(
        image.type || ""
      ).replace("image/", "")}`
  )
  .join("\n")}

## Image preview

${Object.keys(image.thumbnails || {})
  .map(
    (i) =>
      `### ${i.charAt(0).toUpperCase() +
        i.slice(1)}\n\n![](https://open-data.karuna2020.org/${url}/${i}.${(
        image.type || ""
      ).replace("image/", "")})`
  )
  .join("\n\n")}

_This file is automatically generated, please don't edit it manually. If you need any changes, edit [photos.ts](/photos.ts) or ask [@AnandChowdhary](https://github.com/AnandChowdhary)_
`
            );
          }
        }
        if (imageUrls.length) {
          log(
            "Updating Airtable record",
            tab,
            record._id,
            imageUrls.length.toString()
          );
          console.log();
          let currentImages: string[] = [];
          try {
            if (record.cdnImages) {
              currentImages = record.cdnImages
                .split(",")
                .map((i: string) => i.trim());
            }
          } catch (error) {}
          const updateData: any = {
            id: record._id,
            fields: {
              "CDN images": [...new Set([...currentImages, ...imageUrls])].join(
                ", "
              ),
            },
          };
          await updateAirtableRecord(base, tab, [updateData]);
        }
      }
    }
  }
};
